{"version":3,"sources":["common.js","AppProvider.js","components/Header.js","components/Main.js","components/Footer.js","App.js","index.js"],"names":["GAME_TYPES","TWO_PLAYERS","VERSUS_COMPUTER","ICON_CHARS","PLAYER_TURNS","HUMAN","COMPUTER","getEmptyCells","cells","map","val","idx","filter","item","isMoveLeft","length","checkGameState","lines","i","a","b","c","position","iconType","isTie","getRandom","start","end","Math","floor","random","replace","index","value","slice","findRandomMove","emptyCells","minimax","depth","computerType","isMax","score","evaluate","best","lengthCells","nextCells","max","min","findBestMove","bestVal","bestMove","moveVal","THINKING_TIME","AppContext","React","createContext","AppProvider","initState","gameType","currentIcon","playerTurn","Array","fill","gameState","state","changeType","type","initNewGame","humanPlay","newGame","initGame","timeout","clearTimeout","setTimeout","randomMove","computerPlay","setState","applyState","prevState","nextIcon","nextPlayerTurn","makeAIMove","this","Provider","props","children","Component","GameType","name","Consumer","context","onClick","className","Header","contextType","Cell","icon","isDoneClass","Board","boardRef","createRef","current","classList","add","remove","ref","Main","textInfo","currentIconType","Footer","href","target","rel","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.f6d6d994.chunk.js","sourcesContent":["export const GAME_TYPES = {\n  TWO_PLAYERS: 0,\n  VERSUS_COMPUTER: 1\n}\n\nexport const ICON_TYPES = {\n  O: 0,\n  X: 1\n}\n\nexport const ICON_CHARS = ['O', 'X'];\n\nexport const PLAYER_TURNS = {\n  HUMAN: 0,\n  COMPUTER: 1\n}\n\nconst getEmptyCells = (cells) => {\n  return cells\n    .map((val, idx) => [val, idx])\n    .filter(item => item[0] === null);\n}\n\nconst isMoveLeft = (cells) => {\n  const emptyCells = getEmptyCells(cells);\n  return emptyCells.length > 0;\n}\n\nexport const checkGameState = (cells) => {\n  const lines = [\n    [0, 1, 2], // h.h0\n    [3, 4, 5], // h.h1 \n    [6, 7, 8], // h.h2\n    [0, 3, 6], // v.v0\n    [1, 4, 7], // v.v1\n    [2, 5, 8], // v.v2\n    [0, 4, 8], // d.d0\n    [2, 4, 6]  // d.d1\n  ];\n\n  let position = \"\";\n\n  for (let i = 0; i < lines.length; i++) {\n    const [a, b, c] = lines[i];\n\n    if (cells[a] !== null && cells[a] === cells[b] && cells[a] === cells[c]) {\n      if (i >= 0 && i <= 2) position = `h h${i}`;\n      else if (i >= 3 && i <= 5) position = `v v${i - 3}`;\n      else position = `d${i - 6}`;\n\n      return {\n        position,\n        iconType: cells[a],\n        isTie: null\n      }\n    }\n  }\n\n  return {\n    position: \"\",\n    iconType: null,\n    isTie: isMoveLeft(cells) ? null : true\n  };\n}\n\nexport const getRandom = (start, end) => {\n  return start + Math.floor(Math.random() * (end - start));\n}\n\nexport const replace = (cells, index, value) => {\n  return [...cells.slice(0, index), value, ...cells.slice(index + 1, cells.length)];\n}\n\n/**\n * Random move\n */\nexport const findRandomMove = (cells) => {\n  const emptyCells = getEmptyCells(cells);\n\n  if (emptyCells.length > 0) {\n    const randomNum = getRandom(0, emptyCells.length);\n    const index = emptyCells[randomNum][1];\n\n    return index;\n  }\n\n  return null;\n}\n\n/**\n * Find best move based on Minimax algorithm\n */\nconst evaluate = (cells, computerType) => {\n  const lines = [\n    [0, 1, 2], // h.h0\n    [3, 4, 5], // h.h1 \n    [6, 7, 8], // h.h2\n    [0, 3, 6], // v.v0\n    [1, 4, 7], // v.v1\n    [2, 5, 8], // v.v2\n    [0, 4, 8], // d.d0\n    [2, 4, 6]  // d.d1\n  ];\n\n  for (let i = 0; i < lines.length; i++) {\n    const [a, b, c] = lines[i];\n\n    if (cells[a] !== null && cells[a] === cells[b] && cells[a] === cells[c]) {\n      if (cells[a] === computerType) return 10;\n      return -10;\n    }\n  }\n\n  return 0;\n}\n\nconst minimax = (cells, depth, computerType, isMax) => {\n  const score = evaluate(cells, computerType);\n\n  // If Maximizer has won the game return his/her evaluated score \n  if (score === 10) return score - depth;\n\n  // If Minimizer has won the game return his/her evaluated score \n  if (score === -10) return score + depth;\n\n  // If there are no more moves and no winner then it is a tie \n  if (!isMoveLeft(cells)) return 0;\n\n  const lengthCells = cells.length;\n  let best;\n\n  // If this maximizer's move \n  if (isMax) {\n    best = -1000;\n\n    for (let i = 0; i < lengthCells; i++) {\n      const cell = cells[i];\n\n      if (cell === null) {\n        // Make a move\n        const nextCells = replace(cells, i, computerType);\n\n        // Call minimax recursively and choose the maximum value\n        best = Math.max(best, minimax(nextCells, depth + 1, computerType, !isMax));\n      }\n    }\n  } else {\n    best = 1000;\n\n    for (let i = 0; i < lengthCells; i++) {\n      const cell = cells[i];\n\n      if (cell === null) {\n        // Make a move\n        const nextCells = replace(cells, i, 1 - computerType);\n\n        // Call minimax recursively and choose the minimum value\n        best = Math.min(best, minimax(nextCells, depth + 1, computerType, !isMax));\n      }\n    }\n  }\n\n  return best;\n}\n\nexport const findBestMove = (cells, computerType) => {\n  let bestVal = -1000;\n  let bestMove = null;\n\n  const lengthCells = cells.length;\n\n  for (let i = 0; i < lengthCells; i++) {\n    const cell = cells[i];\n\n    if (cell === null) {\n      // Make a move\n      const nextCells = replace(cells, i, computerType);\n\n      // Compute evaluation function for this move. \n      const moveVal = minimax(nextCells, 0, computerType, false);\n\n      // If the value of the current move is more than the best value, then update best\n      if (moveVal > bestVal) {\n        bestVal = moveVal;\n        bestMove = i;\n      }\n    }\n  }\n\n  return bestMove;\n}","import React, { Component } from 'react';\nimport {\n  GAME_TYPES, PLAYER_TURNS,\n  checkGameState, getRandom, replace,\n  findBestMove, findRandomMove\n} from './common';\n\nconst THINKING_TIME = 500;\n\nexport const AppContext = React.createContext();\n\nexport default class AppProvider extends Component {\n  initState = {\n    gameType: GAME_TYPES.TWO_PLAYERS,\n    currentIcon: getRandom(0, 2),\n    playerTurn: getRandom(0, 2),\n    cells: new Array(9).fill(null),\n    gameState: {\n      position: \"\",\n      iconType: null,\n      isTie: null,\n    },\n  }\n\n  state = {\n    gameType: this.initState.gameType,\n    currentIcon: this.initState.currentIcon,\n    playerTurn: this.initState.playerTurn,\n    cells: this.initState.cells,\n    gameState: this.initState.gameState,\n\n    changeType: (type) => {\n      if (this.state.gameType !== type) {\n        this.initNewGame(type);\n      }\n    },\n    humanPlay: (index) => {\n      this.humanPlay(index)\n    },\n    newGame: () => {\n      this.initNewGame(this.state.gameType);\n    }\n  }\n\n  initGame = () => {\n    if (this.state.gameType === GAME_TYPES.VERSUS_COMPUTER &&\n      this.state.playerTurn === PLAYER_TURNS.COMPUTER) {\n\n      if (this.timeout) {\n        clearTimeout(this.timeout);\n      }\n\n      this.timeout = setTimeout(() => {\n        const randomMove = findRandomMove(this.state.cells);\n        this.computerPlay(randomMove);\n      }, THINKING_TIME);\n    }\n  }\n\n  initNewGame = (type = this.initState.gameType) => {\n    this.setState(() => {\n      return {\n        gameType: type,\n        currentIcon: getRandom(0, 2),\n        playerTurn: getRandom(0, 2),\n        cells: this.initState.cells,\n        gameState: this.initState.gameState,\n      }\n    }, () => {\n      this.initGame();\n    });\n  }\n\n  applyState = (prevState, index) => {\n    const cells = prevState.cells;\n    const nextIcon = 1 - prevState.currentIcon;\n    const nextPlayerTurn = 1 - prevState.playerTurn;\n    const nextCells = replace(cells, index, prevState.currentIcon);\n    const gameState = checkGameState(nextCells);\n\n    return {\n      gameState: gameState,\n      currentIcon: nextIcon,\n      playerTurn: nextPlayerTurn,\n      cells: nextCells\n    }\n  }\n\n  humanPlay = (index) => {\n    if (this.state.gameState.position === \"\" && this.state.cells[index] === null &&\n      (this.state.gameType === GAME_TYPES.TWO_PLAYERS || this.state.playerTurn === PLAYER_TURNS.HUMAN)) {\n\n      this.setState(prevState => {\n        return this.applyState(prevState, index);\n      }, () => {\n        // Make a move for computer if the game is in 'versus computer' mode\n        if (this.state.gameState.position === \"\" &&\n          this.state.gameType === GAME_TYPES.VERSUS_COMPUTER &&\n          this.state.playerTurn === PLAYER_TURNS.COMPUTER) {\n\n          setTimeout(() => {\n            this.makeAIMove();\n          }, THINKING_TIME);\n        }\n      });\n    }\n  }\n\n  computerPlay = (index) => {\n    if (this.state.gameState.position === \"\" && this.state.cells[index] === null &&\n      this.state.gameType === GAME_TYPES.VERSUS_COMPUTER &&\n      this.state.playerTurn === PLAYER_TURNS.COMPUTER) {\n\n      this.setState(prevState => this.applyState(prevState, index));\n    }\n  }\n\n  makeAIMove = () => {\n    const bestMove = findBestMove(this.state.cells, this.state.currentIcon);\n\n    if (bestMove !== null) {\n      this.computerPlay(bestMove);\n    }\n  }\n\n  componentDidMount() {\n    this.initGame();\n  }\n\n  render() {\n    return (\n      <AppContext.Provider value={this.state}>\n        {this.props.children}\n      </AppContext.Provider>\n    );\n  }\n}","import React, { Component } from \"react\";\nimport { AppContext } from \"../AppProvider\";\nimport { GAME_TYPES } from \"../common\";\n\nimport \"./Header.css\";\n\nconst GameType = props => {\n  const { value, name } = props;\n\n  return (\n    <AppContext.Consumer>\n      {context => (\n        <li\n          onClick={() => context.changeType(value)}\n          className={value === context.gameType ? \"active\" : \"\"}\n        >\n          {name}\n        </li>\n      )}\n    </AppContext.Consumer>\n  );\n};\n\nclass Header extends Component {\n  render() {\n    return (\n      <header className=\"header\">\n        <h1>Tic Tak Toe</h1>\n        <ul>\n          <GameType value={GAME_TYPES.TWO_PLAYERS} name=\"2 Người chơi\" />\n          <GameType value={GAME_TYPES.VERSUS_COMPUTER} name=\"Đấu với máy\" />\n        </ul>\n        <div>\n          <button onClick={() => this.context.newGame()}>Làm mới</button>\n        </div>\n      </header>\n    );\n  }\n}\n\nHeader.contextType = AppContext;\n\nexport default Header;\n","import React, { Component } from \"react\";\nimport { AppContext } from \"../AppProvider\";\nimport { GAME_TYPES, PLAYER_TURNS, ICON_CHARS } from \"../common\";\nimport \"./Main.css\";\n\nconst ICON_PLACE_HOLDDER = \"I\";\n\nconst Cell = props => {\n  return (\n    <AppContext.Consumer>\n      {context => {\n        const value = context.cells[props.index];\n        const icon = value !== null ? ICON_CHARS[value] : ICON_PLACE_HOLDDER;\n        const isDoneClass = icon !== ICON_PLACE_HOLDDER ? \"done\" : \"\";\n\n        return (\n          <button\n            className={`cell cell-${props.index} ${isDoneClass}`}\n            onClick={() => context.humanPlay(props.index)}\n          >\n            {icon}\n          </button>\n        );\n      }}\n    </AppContext.Consumer>\n  );\n};\n\nclass Board extends Component {\n  constructor(props) {\n    super(props);\n    this.boardRef = React.createRef();\n  }\n\n  componentDidUpdate() {\n    if (this.context.gameState.position !== \"\") {\n      setTimeout(() => {\n        this.boardRef.current.classList.add(\"full\");\n      }, 50);\n    } else {\n      this.boardRef.current.classList.remove(\"full\");\n    }\n  }\n\n  render() {\n    return (\n      <div\n        className={`board ${this.context.gameState.position}`}\n        ref={this.boardRef}\n      >\n        <div className=\"board-row\">\n          <Cell index={0} />\n          <Cell index={1} />\n          <Cell index={2} />\n        </div>\n\n        <div className=\"board-row\">\n          <Cell index={3} />\n          <Cell index={4} />\n          <Cell index={5} />\n        </div>\n\n        <div className=\"board-row\">\n          <Cell index={6} />\n          <Cell index={7} />\n          <Cell index={8} />\n        </div>\n      </div>\n    );\n  }\n}\nBoard.contextType = AppContext;\n\nclass Main extends Component {\n  render() {\n    let textInfo = \"\";\n    const currentIconType = this.context.currentIcon;\n\n    if (this.context.gameState.isTie) {\n      textInfo = \"Hoà!\";\n    } else {\n      if (this.context.gameType === GAME_TYPES.TWO_PLAYERS) {\n        if (this.context.gameState.position === \"\") {\n          textInfo = `Lượt (${ICON_CHARS[currentIconType]})`;\n        } else {\n          textInfo = `Người chơi (${\n            ICON_CHARS[1 - currentIconType]\n          }) chiến thắng!`;\n        }\n      } else {\n        if (this.context.gameState.position === \"\") {\n          if (this.context.playerTurn === PLAYER_TURNS.HUMAN)\n            textInfo = `Lượt của bạn`;\n          else textInfo = `Lượt của máy`;\n        } else {\n          if (this.context.playerTurn === PLAYER_TURNS.HUMAN)\n            textInfo = `Máy đã chiến thắng!`;\n          else textInfo = `Bạn đã chiến thắng!`;\n        }\n      }\n    }\n\n    return (\n      <main className=\"main\">\n        <div className=\"info\">{textInfo}</div>\n        <Board />\n      </main>\n    );\n  }\n}\nMain.contextType = AppContext;\n\nexport default Main;\n","import React, { Component } from \"react\";\nimport \"./Footer.css\";\n\nclass Footer extends Component {\n  render() {\n    return (\n      <footer className=\"footer\">\n        <a\n          href=\"https://github.com/linhndsml/tic-tak-toe\"\n          target=\"_blank\"\n          rel=\"noreferrer noopener\"\n        >\n          Mã nguồn dự án\n        </a>\n      </footer>\n    );\n  }\n}\n\nexport default Footer;\n","import React, { Component } from \"react\";\nimport AppProvider from \"./AppProvider\";\nimport Header from \"./components/Header\";\nimport Main from \"./components/Main\";\nimport Footer from \"./components/Footer\";\n\nimport \"./App.css\";\n\nclass App extends Component {\n  render() {\n    return (\n      <AppProvider>\n        <div className=\"app\">\n          {/* Tieu de */}\n          <Header />\n\n          {/* Phần chứa game */}\n          <Main />\n\n          {/* Chân trang */}\n          <Footer />\n        </div>\n      </AppProvider>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}